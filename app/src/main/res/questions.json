[{"id":1,"title":"Определение «требований к ПО». Виды требований, этапы их разработки.","answer":"Определение требований к ПО:\nТребования к программному обеспечению (ПО) – это спецификация того, что должно быть реализовано. Они описывают поведение системы, свойства системы или её атрибуты. Требования могут также служить ограничениями в процессе разработки системы​.\nВиды требований:\nБизнес-требования:\nВысокоуровневые цели организации или заказчиков системы.\nОписывают, зачем нужна система и какие цели она должна достичь.\nПользовательские требования:\nОписывают, что пользователь должен иметь возможность делать с системой.\nПредставлены в виде пользовательских историй, вариантов использования и таблиц \"событие-отклик\".\nФункциональные требования:\nОпределяют, каким должно быть поведение системы в тех или иных условиях.\nПример: \"Система должна предоставлять возможность распечатать посадочные талоны\".\nНефункциональные требования:\nОписывают, как хорошо система должна выполнять свою работу.\nВключают атрибуты качества (например, производительность, доступность, удобство использования) и ограничения (например, используемые технологии).\nСистемные требования:\nТребования верхнего уровня, описывающие подсистемы ПО или их взаимодействие с оборудованием​​.\nЭтапы разработки требований:\nВыявление требований:\nИспользуются методы интервью, семинаров, фокус-групп, наблюдений, анализа документов и др.\nОпределяются потребности пользователей и заинтересованных лиц​.\nАнализ требований:\nВыявление пробелов, излишков или конфликтов.\nРаспределение требований по компонентам системы.\nСогласование приоритетов​.\nДокументирование требований:\nОформление требований в письменной форме или с использованием диаграмм.\nСоздание спецификаций требований (SRS)​.\nУтверждение требований:\nПроверка правильности и полноты требований.\nРазработка приемочных тестов для подтверждения выполнения требований​.\nУправление требованиями:\nОтслеживание изменений требований, контроль их версий.\nОценка влияния изменений на проект​​.\n","isLearned":false},{"id":2,"title":"Бизнес-требования. Модели анализа бизнеса. Методологии и нотации.","answer":"Бизнес-требования:\nБизнес-требования описывают, зачем организациям нужна система, то есть цели, которые организация намерена достичь с её помощью.\nОни часто документируются в виде документов концепции и границ (vision and scope), уставов проекта или бизнес-кейсов​​.\nПримеры бизнес-требований:\nУвеличение продаж на 25% за полгода.\nПоддержка проверки орфографии для разных языков.\nКто определяет бизнес-требования?\nЗаказчики, финансирующие проект.\nРуководство или другие заинтересованные лица, которые отвечают за достижение бизнес-целей​​.\nМодели анализа бизнеса:\nМодели анализа бизнеса помогают структурировать и представить процессы, которые необходимы для достижения бизнес-целей. Основные используемые модели:\nBPMN (Business Process Model and Notation):\nИспользуется для моделирования бизнес-процессов.\nПозволяет визуализировать процессы в виде блок-схем, чтобы показать их логику и порядок.\nКонтекстные диаграммы:\nПоказывают взаимодействие между системой и внешними участниками (пользователями, системами, устройствами).\nUse Case диаграммы (UML):\nИспользуются для представления сценариев использования системы с участием пользователей или других систем.\nДерево целей (Goal Tree):\nВизуализация целей и задач, связанных с реализацией системы.\nДиаграммы потоков данных (DFD):\nПредставляют потоки данных между процессами и системами​.\nМетодологии и нотации:\nМетодологии разрабатываются для систематизации разработки и анализа требований.\nRUP (Rational Unified Process):\nФормализованный итеративный процесс разработки ПО.\nСтадии анализа в RUP включают:\nАнализ проблемы,\nПонимание потребностей,\nОпределение системы,\nУправление контекстом системы,\nУточнение системы.\nAgile:\nГибкая методология, которая концентрируется на итеративной разработке и постоянном взаимодействии с клиентом.\nSWEBOK:\nСтандарт знаний по программной инженерии, включает разделы, посвящённые извлечению, анализу, специфицированию и проверке требований​​.\n","isLearned":false},{"id":3,"title":"Пользовательские требования. Модели анализа пользовательских требований. Пользовательские истории и варианты использования.","answer":"Пользовательские требования:\nОписывают, что пользователь должен иметь возможность делать с системой.\nПримеры:\nВариант использования: регистрация на рейс через веб-сайт.\nПользовательская история: «Как пассажир, я хочу зарегистрироваться на рейс, чтобы можно было сесть на самолёт»​​.\nМодели анализа пользовательских требований:\nВарианты использования (Use Cases):\nМодели, показывающие, как пользователь взаимодействует с системой для выполнения задач.\nСоставляются в виде сценариев, описывающих последовательность действий пользователя и системы.\nПользовательские истории (User Stories):\nКраткие описания желаемых функций системы с точки зрения пользователя.\nСтруктура:\nКак [роль пользователя], я хочу [цель], чтобы [польза].\nТаблицы «Событие — отклик»:\nОписывают реакцию системы на определённые действия пользователя.\nПримеры документов:\nДокументы пользовательских требований.\nПрототипы пользовательских интерфейсов.\nДиаграммы взаимодействия​​.\n","isLearned":false},{"id":4,"title":"Управление требованиями. Отслеживаемость требований.","answer":"Управление требованиями:\nУправление требованиями включает набор действий для снижения разрушительного влияния изменений на проект.\nОсновные действия:\nОпределение базовой версии требований (baseline).\nОценка влияния изменений и их внедрение управляемым образом.\nОтслеживание зависимости между требованиями и их реализацией.\nПоддержание актуальности требований на протяжении всего проекта.\nОтслеживаемость требований:\nЭто процесс связывания требований с их реализацией, тестами и проектными элементами.\nПозволяет понимать, какие изменения в требованиях влияют на другие части системы​​.\n","isLearned":false},{"id":5,"title":"Выгоды от высококачественного процесса разработки требований.","answer":"Преимущества:\nСнижение количества дефектов в требованиях и готовом продукте.\nУменьшение объёма переделок.\nУскорение разработки и поставки продукта.\nСнижение стоимости модификаций.\nМеньше неиспользуемых функций.\nПовышение удовлетворения заказчиков и членов команды.\nПовышение контроля над проектом и уменьшение хаоса.\nСоздание продукта, который соответствует ожиданиям​​.\n","isLearned":false},{"id":6,"title":"Требования с точки зрения клиента.","answer":"Особенности:\nКлиенты заинтересованы в получении системы, функциональность и качество которой соответствуют их ожиданиям.\nЧасто клиенты либо не понимают, какие требования нужны, либо путаются в уровнях требований (например, пользовательские и бизнес-требования).\nПрава клиента:\nПолучение отчётов о процессе формирования требований.\nВозможность изменить требования.\nУчастие в проверке требований и прототипов​​.\nОбязанности клиента:\nТочно и конкретно описывать требования.\nСвоевременно принимать решения.\nПроверять требования и прототипы​​.\n","isLearned":false},{"id":7,"title":"Проблемы при формировании требований.","answer":"Основные проблемы:\nПользователи заняты и не всегда готовы участвовать в обсуждениях.\nНет общего понимания цели проекта.\nПутаница между уровнями требований.\nНедостаточное вовлечение пользователей​​.\nРешения:\nЧастые встречи с клиентом.\nЧёткое описание целей и границ проекта.\nЭффективное взаимодействие с пользователями​​.\n","isLearned":false},{"id":8,"title":"Разрыв ожиданий. Уменьшение разрыва ожиданий.","answer":"Разрыв ожиданий:\nЭто пробел между тем, что реально нужно клиенту, и тем, что предоставили разработчики.\nПричины: недостаток информации, несогласованность требований.\nРешение:\nЧастые точки контакта с клиентами.\nПроведение интервью, анализа дизайна, оценки прототипов.\nУточнение требований на каждой стадии проекта​​.\n","isLearned":false},{"id":9,"title":"Заинтересованные лица.","answer":"Определение:\nЗаинтересованные лица – это люди, группы или организации, которые влияют на проект или на которых влияет проект.\nПримеры:\nПользователи (прямые и косвенные).\nРуководство.\nТестировщики, разработчики, аналитики.\nПоставщики ПО и оборудования​​.\n","isLearned":false},{"id":10,"title":"Типовое ПО – кто представляет интересы клиентов.","answer":"В коммерческих проектах интересы клиентов часто представляют маркетологи, менеджеры по продукту.\nОднако без участия конечных пользователей сформировать корректные пользовательские требования невозможно​​.\n","isLearned":false},{"id":11,"title":"Сотрудничество клиентов и разработчиков.","answer":"Важность сотрудничества:\nЭффективное сотрудничество клиентов и разработчиков позволяет:\nСнизить количество ошибок в требованиях.\nИзбежать значительного разрыва ожиданий.\nУбедиться, что продукт соответствует ожиданиям как клиента, так и пользователей.\nПринципы:\nСоздание взаимного уважения между сторонами.\nЧёткое определение ролей и обязанностей участников.\nПостоянное взаимодействие через интервью, семинары, встречи.\nПрозрачное обсуждение целей и ограничений проекта​​.\n","isLearned":false},{"id":12,"title":"Права и обязанности клиентов и разработчиков.","answer":"Права клиентов:\nТребовать подробные отчёты и описание требований.\nВносить изменения в требования.\nПолучать систему, соответствующую их ожиданиям.\nУчаствовать в проверке и утверждении требований.\nОбязанности клиентов:\nЧётко описывать свои потребности.\nПринимать своевременные решения по требованиям.\nОценивать и проверять требования и прототипы.\nУважать сроки, бюджет и ограничения разработки​​.\nПрава разработчиков:\nТребовать чёткого и конкретного описания требований.\nПолучать своевременные решения по изменениям.\nОжидать реалистичных требований.\nОбязанности разработчиков:\nУважать потребности клиента.\nПредоставлять регулярную обратную связь.\nУчитывать изменения требований и оценивать их влияние​​.\n","isLearned":false},{"id":13,"title":"Достижение соглашения о требованиях. Базовое соглашение о требованиях.","answer":"Достижение соглашения:\nТребования утверждаются после проверки всеми сторонами: клиентами, разработчиками, тестировщиками, руководством.\nЭто подтверждает, что:\nКлиенты уверены в соответствии требований их потребностям.\nРазработчики понимают и могут реализовать требования.\nТестировщики могут проверить реализацию требований​​.\nБазовое соглашение о требованиях:\nЭто фиксированный набор требований на определённый момент времени, который используется как основа для разработки.\nПозволяет контролировать изменения и управлять проектом.\nПреимущества:\nГарантия согласованности требований.\nУменьшение разрыва ожиданий.\nПоддержка прозрачности и доверия между сторонами​​.\n","isLearned":false},{"id":14,"title":"Отбор пользователей для выявления требований. Признаки классификации пользователей.","answer":"Отбор пользователей:\nДля выявления требований важно привлекать представителей всех классов пользователей:\nПривилегированные пользователи (ключевые для достижения бизнес-целей).\nНепривилегированные пользователи (имеющие ограничения доступа).\nПризнаки классификации пользователей:\nПо привилегиям доступа.\nПо решаемым задачам.\nПо частоте использования системы.\nПо опыту работы с системами.\nПо платформе доступа (ПК, мобильные устройства).\nПо родному языку​​.\n","isLearned":false},{"id":15,"title":"Способы определения классов пользователей. Архетипы пользователей.","answer":"Способы определения классов:\nИнтервью с кураторами и пользователями: Определение, кто будет использовать систему.\nМозговой штурм: Придумывание максимально возможного числа классов пользователей.\nМодели анализа: Выявление групп с похожими потребностями.\nСтруктурные схемы: Представление организации и ролей внутри неё​​.\nАрхетипы пользователей:\nГипотетическое описание типичного представителя группы пользователей.\nИспользуются, если нет прямого доступа к реальным пользователям.\nПозволяют учесть основные потребности и ожидания​​.\n","isLearned":false},{"id":16,"title":"Методы выявления требований: интервью, семинары, фокус-группы, наблюдение, опросные листы.","answer":"Методы:\nИнтервью:\nИндивидуальные или групповые встречи с пользователями и заинтересованными сторонами.\nИспользуются для уточнения конкретных деталей​​.\nСеминары:\nОрганизованные встречи с участием всех заинтересованных сторон.\nЭффективны для согласования требований.\nФокус-группы:\nНебольшие группы пользователей, обсуждающие функциональные и качественные требования.\nНаблюдение:\nИзучение работы пользователей в их реальной среде.\nПомогает выявить неочевидные требования.\nОпросные листы:\nСбор данных от больших групп пользователей.\nПрименяются для статистического анализа и выявления общих предпочтений​​.\n","isLearned":false},{"id":17,"title":"Стадии выявления требований в проекте. Правила сбора информации.","answer":"Стадии выявления требований:\nСбор информации.\nАнализ данных.\nФормализация требований.\nПравила сбора информации:\nЧётко определить цели встречи.\nПодготовить вопросы и модели заранее.\nУчаствовать в обсуждении активно, но придерживаться границ проекта.\nФиксировать полученную информацию и её источники​​.\n","isLearned":false},{"id":18,"title":"Ограничения.","answer":"Определение ограничений:\nОграничения – это ограничения на выбор вариантов, доступных разработчику при проектировании и разработке системы.\nПримеры ограничений:\nСистема должна быть написана на определённом языке программирования.\nРазмер файлов не должен превышать 10 МБ.\nДля безопасных транзакций необходимо использовать 256-битное шифрование.\nТребуется использование определённых стандартов интерфейсов​​.\n","isLearned":false},{"id":19,"title":"Подразумеваемые и неявные требования.","answer":"Подразумеваемые требования:\nЭто требования, которые люди ожидают, но не выражают явно.\nНапример, пользователь может ожидать, что интерфейс будет интуитивно понятным​​.\nНеявные требования:\nТребования, которые являются следствием других требований, но не прописаны напрямую.\nНапример, если система поддерживает многопользовательскую работу, то требуется реализация системы аутентификации.\nРиск:\nЕсли такие требования не фиксируются, разработчики могут их не учесть​​.\n","isLearned":false},{"id":20,"title":"Поиск упущенных требований.","answer":"Способы:\nРазбивать высокоуровневые требования на простейшие составляющие.\nУбедиться, что каждый класс пользователей предоставил свои требования.\nПроверять пограничные значения (например, максимальные или минимальные данные).\nИспользовать модели данных для поиска недостающих требований.\nСоздавать контрольные списки стандартных функциональных областей.\nВыявлять логические ошибки в наборах требований с использованием операторов \"И\", \"ИЛИ\", \"НЕ\"​​.\n","isLearned":false},{"id":21,"title":"Стандарты и методологии разработки требований.","answer":"Стандарты:\nSWEBOK (SoftWare Engineering Body of Knowledge):\nСвод знаний по программной инженерии, содержащий рекомендации по извлечению, анализу, специфицированию и проверке требований.\nISO/IEC/IEEE 29148:\nМеждународный стандарт по управлению требованиями.\nМетодологии:\nRUP (Rational Unified Process):\nИтеративный процесс, направляемый требованиями и визуальным моделированием.\nAgile:\nИнкрементная методология, подходящая для проектов с меняющимися требованиями.\nScrum:\nФокусируется на приоритетах и итеративной работе с резервом требований.\nWaterfall:\nКлассическая каскадная модель, где требования фиксируются перед началом разработки​​.\n","isLearned":false},{"id":22,"title":"Основные артефакты анализа. Модели анализа бизнеса.","answer":"Основные артефакты анализа:\nСпецификация требований (SRS).\nДиаграммы бизнес-процессов (BPMN).\nКонтекстные диаграммы.\nКарты экосистем (описание всех взаимодействующих систем).\nМодели анализа бизнеса:\nBPMN:\nСтандарт для моделирования бизнес-процессов, использующий блок-схемы.\nДиаграммы потоков данных (DFD):\nПоказывают потоки информации между процессами и системами.\nUse Case диаграммы:\nИллюстрируют взаимодействие между системой и пользователями​​.\n","isLearned":false},{"id":23,"title":"Модели анализа требований. Подходы к моделированию.","answer":"Модели анализа требований:\nКонтекстные диаграммы:\nПоказывают границы системы и её взаимодействие с внешними элементами.\nДиаграммы последовательностей (Sequence Diagrams):\nОписывают обмен сообщениями между объектами в процессе выполнения функции.\nДиаграммы классов (Class Diagrams):\nПоказывают классы, их свойства и отношения между ними.\nПодходы к моделированию:\nСтруктурный подход:\nФокусируется на структурировании данных и их потоках.\nОбъектно-ориентированный подход:\nИспользует модели UML для анализа требований.\nПроцессный подход:\nПодразумевает использование моделей бизнес-процессов (например, BPMN)​​.\n","isLearned":false},{"id":24,"title":"Пользовательские требования. Варианты использования и сценарии использования. Пользовательские истории.","answer":"Варианты использования (Use Cases):\nПредставляют взаимодействие пользователя с системой для выполнения задачи.\nПример: «Система должна позволить пассажиру распечатать посадочный талон».\nСценарии использования:\nПодробное описание последовательности шагов, которые выполняет пользователь для достижения своей цели.\nПользовательские истории:\nФормат: «Как [роль пользователя], я хочу [цель], чтобы [польза]».\nПример: «Как покупатель, я хочу видеть отзывы других пользователей, чтобы выбрать подходящий товар»​​.\n","isLearned":false},{"id":25,"title":"Определение, анализ и проверка вариантов использования. Варианты использования и функциональные требования.","answer":"Определение вариантов использования:\nВариант использования (Use Case) – это описание взаимодействия между пользователем (или внешней системой) и системой для достижения конкретной цели.\nСоставляется в виде последовательности шагов, которые выполняют пользователь и система​​.\nАнализ вариантов использования:\nОценка соответствия задач пользователей бизнес-требованиям.\nПроверка полноты и корректности сценариев.\nУточнение функциональных требований, вытекающих из сценариев.\nПроверка вариантов использования:\nВопросы для проверки:\nОхватывает ли вариант все возможные действия пользователя?\nУчитываются ли исключительные ситуации?\nЕсть ли логическая связь между шагами сценария?\nСвязь с функциональными требованиями:\nВарианты использования помогают определить, какие функции система должна реализовать, чтобы поддерживать задачи пользователя.\nНапример, из сценария «Регистрация на рейс» вытекают функциональные требования: возможность ввода данных о пассажире, проверка доступности рейса и печать посадочного талона​​.\n","isLearned":false},{"id":26,"title":"Преимущества требований, основанных на вариантах использования.","answer":"Основные преимущества:\nПонятность для всех сторон:\nВарианты использования легко понять как заказчикам, так и разработчикам.\nВыявление требований:\nПомогают выявить как функциональные, так и нефункциональные требования.\nСвязь с тестированием:\nПозволяют разработать сценарии тестирования на основе пользовательских сценариев.\nУправление изменениями:\nЛегко вносить изменения в сценарии и обновлять связанные требования.\nФокус на потребностях пользователя:\nОбеспечивают разработку системы, ориентированной на выполнение задач пользователей​​.\n","isLearned":false},{"id":27,"title":"Функциональные требования. Модели анализа функциональных требований. Методологии и нотации.","answer":"Определение функциональных требований:\nОписывают поведение системы в конкретных условиях.\nПример: «Система должна автоматически назначить место в самолёте, если в профиле пользователя не указаны предпочтения»​​.\nМодели анализа функциональных требований:\nUse Case диаграммы:\nИллюстрируют взаимодействие системы с пользователями для выполнения задач.\nДиаграммы последовательностей (Sequence Diagrams):\nОписывают порядок обмена сообщениями между объектами системы.\nДиаграммы классов:\nПоказывают структуру системы и связи между её компонентами.\nМетодологии и нотации:\nUML (Unified Modeling Language):\nУнифицированный язык моделирования для представления требований и проектирования системы.\nBPMN (Business Process Model and Notation):\nДля моделирования бизнес-процессов, связанных с функциональными требованиями.\nRUP и Agile:\nМетодологии, позволяющие структурировать процесс анализа и документирования функциональных требований​​.\n","isLearned":false},{"id":28,"title":"Бизнес-правила и их роль в требованиях. Выявление бизнес-правил.","answer":"Бизнес-правила:\nОписывают стандарты, политики и ограничения, которые должны соблюдаться системой.\nПримеры:\n«Возврат товаров возможен в течение 14 дней с момента покупки».\n«Налоговый расчёт должен выполняться в соответствии с местными законодательными актами».\nРоль в требованиях:\nСлужат источником функциональных и нефункциональных требований.\nОпределяют, как система должна поддерживать бизнес-процессы.\nПомогают формировать ограничения на проектирование системы.\nВыявление бизнес-правил:\nМетоды:\nИнтервью с экспертами.\nАнализ документации и нормативных актов.\nСеминары и обсуждения с заинтересованными сторонами​​.\n","isLearned":false},{"id":29,"title":"Влияние бизнес-правил на различные типы требований к ПО.","answer":"Влияние на функциональные требования:\nБизнес-правила определяют, какие функции должна реализовать система.\nНапример, правило «Заказы принимаются до 18:00» формирует функциональное требование: проверка времени при оформлении заказа.\nВлияние на нефункциональные требования:\nБизнес-правила могут накладывать ограничения на производительность, безопасность и доступность системы.\nНапример, правило «Данные клиентов должны быть защищены» влияет на требования к шифрованию и управлению доступом.\nВлияние на пользовательские требования:\nБизнес-правила могут влиять на задачи, которые пользователь должен выполнить с помощью системы.\nНапример, налоговые правила определяют, какие поля заполняет пользователь при оформлении заказа​​.\n","isLearned":false},{"id":30,"title":"Классификация бизнес-правил. Организация хранения бизнес-правил.","answer":"Классификация бизнес-правил:\nСтруктурные:\nОпределяют организационную структуру или последовательность действий (например, алгоритмы расчёта).\nОграничительные:\nЗадают ограничения для действий пользователя или системы.\nПоведенческие:\nУказывают, как система должна реагировать в определённых ситуациях.\nОрганизация хранения бизнес-правил:\nХранение может осуществляться в:\nТекстовых документах.\nБазах данных.\nСпециализированных средствах управления правилами.\nНотациях, таких как BPMN​​.\n","isLearned":false},{"id":31,"title":"Статические диаграммы анализа функциональных требований.","answer":"Статические диаграммы:\nСтатические диаграммы описывают структуру системы и её компонентов, которые не изменяются со временем. Они помогают понять, как устроена система.\nПримеры статических диаграмм:\nДиаграммы классов (Class Diagrams):\nПоказывают классы системы, их атрибуты и методы, а также связи между ними.\nИспользуются для анализа и проектирования объектов системы.\nДиаграммы компонентов (Component Diagrams):\nОтражают архитектуру системы, показывая, как компоненты связаны друг с другом.\nДиаграммы пакетов (Package Diagrams):\nОрганизуют классы и компоненты в логические группы, облегчая их управление.\nДиаграммы объектов (Object Diagrams):\nКонкретные примеры объектов, созданных на основе классов, с указанием их значений и связей​​.\n","isLearned":false},{"id":32,"title":"Динамические диаграммы анализа функциональных требований.","answer":"Динамические диаграммы:\nДинамические диаграммы описывают поведение системы во времени, включая взаимодействие её компонентов.\nПримеры динамических диаграмм:\nДиаграммы последовательностей (Sequence Diagrams):\nПоказывают обмен сообщениями между объектами или участниками процесса.\nНапример, пользователь запрашивает данные, система отвечает результатами.\nДиаграммы состояний (State Diagrams):\nОписывают возможные состояния объекта и переходы между ними в ответ на события.\nНапример, \"заказ\" может находиться в состояниях \"создан\", \"оплачен\", \"доставлен\".\nДиаграммы активности (Activity Diagrams):\nМоделируют поток управления или данных между действиями.\nИспользуются для отображения сложных бизнес-процессов.\nДиаграммы взаимодействия (Interaction Overview Diagrams):\nСочетают последовательности действий и активности в одном представлении.\nДиаграммы потоков данных (Data Flow Diagrams, DFD):\nПоказывают движение данных между процессами, хранилищами данных и внешними объектами.\n","isLearned":false},{"id":33,"title":"Характеристики идеальных требований.","answer":"Основные характеристики:\nПолнота:\nВсе аспекты системы описаны, без пробелов в функциональности.\nОднозначность:\nНет двусмысленных формулировок, которые могли бы быть интерпретированы по-разному.\nПроверяемость:\nМожно подтвердить выполнение требований с помощью тестирования.\nОбоснованность:\nТребования связаны с конкретными бизнес-целями или пользовательскими задачами.\nАктуальность:\nОтражают текущие потребности бизнеса или пользователя.\nРеалистичность:\nМогут быть реализованы в рамках заданных ограничений (технических, временных, бюджетных).\nПрослеживаемость:\nКаждое требование связано с исходным источником (например, пользовательской историей или бизнес-целью).\n","isLearned":false},{"id":34,"title":"Точки зрения на требования. Уровень детализации требований.","answer":"Точки зрения на требования:\nС точки зрения бизнеса:\nОсновной фокус на цели и выгодах от системы.\nС точки зрения пользователей:\nОриентация на задачи, которые пользователи должны выполнять с системой.\nС точки зрения разработчиков:\nФокус на функциях и ограничениях, которые должны быть реализованы.\nС точки зрения тестировщиков:\nПроверяемость и тестируемость требований​​.\nУровни детализации требований:\nБизнес-требования:\nВысокий уровень, описывающий цели и задачи.\nПользовательские требования:\nСредний уровень, показывающий, что пользователи должны делать.\nФункциональные и нефункциональные требования:\nНизкий уровень, описывающий детали реализации и качественные аспекты системы​​.\n","isLearned":false},{"id":35,"title":"Определение требований к данным. Моделирование отношений данных.","answer":"Требования к данным:\nОписывают формат, структуру и ограничения на данные, используемые системой.\nПример: «Почтовый индекс состоит из пяти цифр, за которыми может следовать дефис и четыре дополнительные цифры».\nМоделирование отношений данных:\nДиаграммы сущность-связь (ERD):\nПоказывают сущности (например, \"клиент\", \"заказ\"), их атрибуты и связи между ними.\nДиаграммы классов (Class Diagrams):\nМогут использоваться для представления объектов и их взаимосвязей в системе.\nМодели данных:\nВключают нормализованные таблицы, атрибуты и связи для обеспечения целостности данных​​.\n","isLearned":false},{"id":36,"title":"Диаграммы классов. Словарь данных. Анализ данных.","answer":"Диаграммы классов:\nПоказывают структуры классов, их свойства, методы и связи между ними.\nИспользуются для анализа и проектирования объектов в системе.\nСловарь данных:\nСодержит определения и описания данных, используемых системой.\nПример:\nПоле \"Имя клиента\": текст, длина – до 50 символов.\nПоле \"Дата заказа\": дата в формате ГГГГ-ММ-ДД.\nАнализ данных:\nПроцесс выявления требований к данным, включая:\nОграничения (обязательные поля, форматы).\nЗависимости между данными.\nОбъемы и частоту доступа к данным​​.\n","isLearned":false},{"id":37,"title":"Нефункциональные требования. Классы нефункциональных требований.","answer":"Определение нефункциональных требований:\nОписывают, как система должна работать, а не что она должна делать.\nКлассы нефункциональных требований:\nАтрибуты качества:\nПроизводительность, доступность, надёжность, удобство использования.\nВнешние интерфейсы:\nВзаимодействие с другими системами или устройствами.\nОграничения:\nОграничения проектирования, технологии, платформы и т.д.​​.\n","isLearned":false},{"id":38,"title":"Атрибуты качества. Внешние и внутренние атрибуты качества.","answer":"Атрибуты качества:\nВнешние атрибуты качества:\nПроизводительность, масштабируемость, безопасность, удобство использования.\nВнутренние атрибуты качества:\nЧитаемость кода, модульность, повторное использование компонентов.\nРоль в проекте:\nАтрибуты качества влияют на архитектуру системы, выбор технологий и методы тестирования​\n","isLearned":false},{"id":39,"title":"Прототипы как средство снижения риска. Классификация прототипов.","answer":"Прототипы как средство снижения риска:\nПрототипы позволяют визуализировать ключевые аспекты системы ещё до её полной реализации, что помогает:\nУточнить требования.\nВыявить возможные проблемы на ранних стадиях.\nУменьшить вероятность недопонимания между клиентами и разработчиками.\nПроверить идеи и концепции с минимальными затратами.\nКлассификация прототипов:\nБросовые (throwaway):\nСоздаются для изучения и проверки идей, после чего утилизируются.\nЭволюционные (evolutionary):\nРазвиваются и перерастают в конечный продукт.\nВысокоточные (high-fidelity):\nТочные модели, которые максимально близки к финальной версии системы.\nНизкоточные (low-fidelity):\nУпрощённые модели (например, бумажные прототипы, схемы), используемые на ранних стадиях​​.\n","isLearned":false},{"id":40,"title":"Определение приоритетов требований. Приёмы определения приоритетов.","answer":"Определение приоритетов:\nПриоритизация требований помогает выделить наиболее важные функции и сосредоточить ресурсы на их реализации.\nПриёмы определения приоритетов:\nМатричный подход:\nКаждое требование оценивается по критериям (важность, сложность, стоимость) и ранжируется.\nМетод MoSCoW:\nКлассификация требований:\nMust have (обязательные).\nShould have (желательные).\nCould have (возможные).\nWon’t have (не включаемые в текущую версию).\nКанальная модель:\nОценка влияния каждого требования на удовлетворение потребностей клиента.\nПарное сравнение:\nСравнение требований попарно для определения относительного приоритета.\nАнализ затрат и выгод:\nОпределение приоритетов на основе ожидаемых выгод и затрат на реализацию​​.\n","isLearned":false},{"id":41,"title":"Утверждение требований. Рецензирование требований.","answer":"Утверждение требований:\nПроцесс подтверждения того, что требования корректны, полны и одобрены всеми сторонами.\nРецензирование требований:\nВиды рецензирования:\nФормальное (с фиксированным протоколом и согласованием).\nНеформальное (обсуждения, обратная связь).\nМетоды рецензирования:\nЧтение и анализ требований группой экспертов.\nИспользование чек-листов для проверки полноты и согласованности.\nКлючевые моменты проверки:\nПолнота.\nЯсность.\nПроверяемость.\nСоответствие бизнес-целям​​.\n","isLearned":false},{"id":42,"title":"Прототипы требований. Тестирование требований.","answer":"Прототипы требований:\nЭто предварительные модели системы, которые позволяют:\nПроверить корректность понимания требований.\nОценить возможные проблемы реализации.\nТестирование требований:\nМетоды тестирования:\nРазработка тест-кейсов на основе требований.\nПроверка требований на противоречия и полноту.\nВерификация требований через взаимодействие с пользователями и разработчиками.\nЦели тестирования:\nУбедиться, что требования полны и точны.\nОбеспечить возможность тестирования системы в будущем.\nКритерии тестируемости:\nТребования должны быть проверяемыми через тестовые сценарии (например, «система должна поддерживать обработку 100 запросов в секунду»)​​.\n","isLearned":false},{"id":43,"title":"Утверждение требований с применением критериев приемки.","answer":"Утверждение требований:\nКритерии приемки определяются для каждого требования, чтобы оценить, соответствует ли система установленным целям.\nПример применения критериев приемки:\nТребование: «Система должна обрабатывать запросы за 2 секунды».\nКритерий приемки: «В 95% случаев система должна завершать обработку запроса за 2 секунды или меньше».\nПроцесс:\nОпределение измеримых критериев для каждого требования.\nРазработка тестов для проверки выполнения критериев.\nУтверждение требований только после успешного прохождения тестов​​.\n","isLearned":false},{"id":44,"title":"Повторное использование требований. Виды повторного использования требований. Популярные сценарии повторного использования.","answer":"Повторное использование требований:\nЭто процесс использования уже разработанных требований в новых проектах для снижения времени и усилий на их создание.\nВиды повторного использования:\nПовторное использование на уровне системы:\nОбщие модули, такие как авторизация, отчётность.\nПовторное использование на уровне требований:\nИспользование стандартных требований (например, безопасность, производительность).\nПопулярные сценарии:\nРазработка новых версий ПО.\nПроекты с похожими функциями или модулями.\nТиповые корпоративные системы, где стандартизированы процессы (например, CRM, ERP).\nПреимущества:\nУскорение разработки.\nСнижение затрат.\nПовышение качества за счёт использования проверенных требований​​.\n","isLearned":false}]